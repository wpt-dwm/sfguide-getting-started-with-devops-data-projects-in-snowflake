-- SCHEMA LEVEL OBJECTS: 
--Bronze
{% set DB = 'BRONZE'%}
{% set SCHEMA = 'CLAIMS_SYSTEM'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.TABLE_1
(
    COL1 INT,
    COL2 VARCHAR
)
ENABLE_SCHEMA_EVOLUTION = TRUE;
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.TABLE_2
(
    COL1 INT,
    COL2 VARCHAR
)
ENABLE_SCHEMA_EVOLUTION = TRUE;

{% set SCHEMA = 'REFERENCE'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.ICD_9_CODES
(
    COL1 INT,
    COL2 VARCHAR
)
ENABLE_SCHEMA_EVOLUTION = TRUE;
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.ICD_10_CODES
(
    COL1 INT,
    COL2 VARCHAR
)
ENABLE_SCHEMA_EVOLUTION = TRUE;


--Silver
{% set DB = 'SILVER'%}
{% set SCHEMA = 'REFERENCE'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.ICD_9_CODES
(
    COL1 INT,
    COL2 VARCHAR
);
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.ICD_10_CODES
(
    COL1 INT,
    COL2 VARCHAR
);
{% set SCHEMA = 'CLAIMS_SYSTEM'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.TABLE_1
(
    COL1 INT,
    COL2 VARCHAR
);
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.TABLE_2
(
    COL1 INT,
    COL2 VARCHAR
);

--Gold
{% set DB = 'GOLD'%}
{% set SCHEMA = 'MEMBERSHIP'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.MEMBER_D
(
    MEMBER_ID INT,
    MEMBER_FIRST_NAME VARCHAR
);
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.MEMBER_COUNTS_F
(
    DATE_ID INT,
    MEMBER_COUNT INT
);

{% set SCHEMA = 'CLAIMS'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.CLAIM_F
(
    CLAIM_ID INT,
    DIAGNOSIS_ID INT,
    MEMBER_ID INT
);
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.CLAIM_LINE_F
(
    CLAIM_LINE_ID INT,
    CLAIM_ID INT,
    CLAIM_LINE_NUMBER INT,
    PAID_AMOUNT DECIMAL
)
CLUSTER BY (CLAIM_ID)
;
{% set SCHEMA = 'REFERENCE'%}
DEFINE TABLE {{DB}}_{{ENV}}_DB.{{SCHEMA}}.DIAGNOSIS_D
(
    DIAGNOSIS_ID INT,
    DIAGNOSIS_CODE VARCHAR
);

--Views
--NOTE - The CREATE OR ALTER VIEW command doesnâ€™t support changing a view definition once a view is created. 
--This limitation is inherited from the ALTER VIEW command.
DEFINE VIEW {{DB}}_{{ENV}}_DB.MEMBERSHIP.TOP_100_MEMBERS_BY_SPEND
AS 
SELECT TOP 100 COUNT(DISTINCT C.CLAIM_ID) AS CLAIM_COUNT
, D.DIAGNOSIS_CODE
, M.MEMBER_FIRST_NAME
, SUM(PAID_AMOUNT) AS TOTAL_PAID_AMOUNT
FROM GOLD_{{ENV}}_DB.CLAIMS.CLAIM_F C
JOIN GOLD_{{ENV}}_DB.REFERENCE.DIAGNOSIS_D D
    ON C.DIAGNOSIS_ID = D.DIAGNOSIS_ID
JOIN GOLD_{{ENV}}_DB.MEMBERSHIP.MEMBER_D M
    ON C.MEMBER_ID = M.MEMBER_ID
JOIN GOLD_{{ENV}}_DB.CLAIMS.CLAIM_LINE_F CL
GROUP BY ALL
ORDER BY TOTAL_PAID_AMOUNT DESC
;

